{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","utils/fetchClient.ts","components/PostDetails.tsx","api/api.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["PostsList","posts","postSelected","useState","selectedId","setSelectedId","className","map","post","id","title","type","classNames","onClick","Loader","NewCommentForm","commentLoading","commentAdd","name","setName","email","setEmail","body","setBody","validSubmit","setValidSubmit","validInput","inputType","onSubmit","event","preventDefault","htmlFor","placeholder","value","onChange","e","target","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","JSON","stringify","headers","then","fetch","response","json","client","PostDetails","selectedPost","postError","setPostError","formDisplayed","setFormDisplayed","commentsLoading","setCommentsLoading","setCommentLoading","comments","setComments","handleCommentDelete","commentId","filter","comment","deleteComment","useEffect","newComments","catch","finally","handleShowAddComment","useCallback","length","href","postId","addComment","newComment","UserSelector","users","selectedUser","userSelectedId","dropdownActive","setDropdownActive","dropdownRef","useRef","handleUsersDropdown","current","contains","document","addEventListener","removeEventListener","ref","role","user","App","setUsers","setPosts","setSelectedUser","setSelectedPost","postsLoading","setPostsLoading","serchedUrl","userPosts","selectPost","find","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.f370eff8.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ninterface PostListProps {\n  posts: Post[],\n  postSelected: (post: Post) => void,\n}\n\nexport const PostsList: React.FC<PostListProps> = ({\n  posts,\n  postSelected,\n}) => {\n  const [selectedId, setSelectedId] = useState<number | null>(null);\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => {\n            const { id, title } = post;\n\n            return (\n              <tr data-cy=\"Post\" key={id}>\n                <td data-cy=\"PostId\">{id}</td>\n                <td data-cy=\"PostTitle\">\n                  {title}\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className={classNames('button is-link', {\n                      'is-light': selectedId !== id,\n                    })}\n                    onClick={() => {\n                      postSelected(post);\n                      if (selectedId !== id) {\n                        setSelectedId(id);\n                      } else {\n                        setSelectedId(null);\n                      }\n                    }}\n                  >\n                    {selectedId === id ? 'Close' : 'Open'}\n                  </button>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable react/button-has-type */\nimport React, { useState } from 'react';\nimport classNames from 'classnames';\n\ninterface NewCommentFormProps {\n  commentLoading: boolean,\n  commentAdd: (name: string, email: string, comment: string) => void,\n}\n\nexport const NewCommentForm: React.FC<NewCommentFormProps> = ({\n  commentLoading,\n  commentAdd,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n  const [validSubmit, setValidSubmit] = useState(false);\n\n  const handleFormClear = () => {\n    setName('');\n    setEmail('');\n    setBody('');\n    setValidSubmit(false);\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (name && email && body) {\n      commentAdd(name, email, body);\n    } else {\n      setValidSubmit(true);\n\n      return;\n    }\n\n    setValidSubmit(false);\n    setBody('');\n  };\n\n  const validInput = (inputType: string) => validSubmit && !inputType;\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input',\n              {\n                'is-danger': validInput(name),\n              })}\n            value={name}\n            onChange={(e) => setName(e.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {validInput(name) && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {validInput(name) && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input',\n              {\n                'is-danger': validInput(email),\n              })}\n            value={email}\n            onChange={e => setEmail(e.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {validInput(email) && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {validInput(email) && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', {\n              'is-danger': validInput(body),\n            })}\n            value={body}\n            onChange={e => setBody(e.target.value)}\n          />\n        </div>\n\n        {validInput(body) && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button',\n              'is-link',\n              { 'is-loading': commentLoading },\n            )}\n\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleFormClear}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\nimport { addComment, deleteComment, getComments } from '../api/api';\n\ninterface PostDetailsProps {\n  selectedPost: Post,\n}\n\nexport const PostDetails: React.FC<PostDetailsProps> = ({ selectedPost }) => {\n  const [postError, setPostError] = useState(false);\n  const [formDisplayed, setFormDisplayed] = useState(false);\n  const [commentsLoading, setCommentsLoading] = useState(false);\n  const [commentLoading, setCommentLoading] = useState(false);\n  const [comments, setComments] = useState<Comment[]>([]);\n\n  const handleCommentAdd = (name: string, email: string, comment: string) => {\n    setCommentLoading(true);\n    addComment(selectedPost.id, name, email, comment)\n      .then(newComment => {\n        setComments([...comments, newComment]);\n      })\n      .catch(() => setPostError(true))\n      .finally(() => setCommentLoading(false));\n  };\n\n  const handleCommentDelete = (commentId: number) => {\n    setComments(comments.filter(comment => comment.id !== commentId));\n\n    deleteComment(commentId);\n  };\n\n  useEffect(() => {\n    setPostError(false);\n    setCommentsLoading(true);\n    setFormDisplayed(false);\n\n    getComments(selectedPost.id)\n      .then(newComments => {\n        setComments(newComments);\n      })\n      .catch(() => setPostError(true))\n      .finally(() => setCommentsLoading(false));\n  }, [selectedPost]);\n\n  const handleShowAddComment = useCallback(() => {\n    setFormDisplayed(true);\n  }, []);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"block\">\n        <h2 data-cy=\"PostTitle\">\n          {`#${selectedPost.id}: ${selectedPost.title}`}\n        </h2>\n\n        <p data-cy=\"PostBody\">\n          {selectedPost.body}\n        </p>\n      </div>\n\n      <div className=\"block\">\n        {commentsLoading && <Loader />}\n\n        {postError ? (\n          <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n            Something went wrong\n          </div>\n        ) : (\n          <>\n            {!commentsLoading && !comments.length && (\n              <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                No comments yet\n              </p>\n            )}\n\n            {!commentsLoading && comments.length > 0\n            && <p className=\"title is-4\">Comments:</p>}\n            {!commentsLoading && comments.length > 0\n            && comments.map(comment => {\n              const {\n                name,\n                email,\n                body,\n                id,\n              } = comment;\n\n              return (\n                <article\n                  className=\"message is-small\"\n                  data-cy=\"Comment\"\n                  key={id}\n                >\n                  <div className=\"message-header\">\n                    <a href={`mailto:${email}`} data-cy=\"CommentAuthor\">\n                      {name}\n                    </a>\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={() => handleCommentDelete(id)}\n                    >\n                      delete button\n                    </button>\n                  </div>\n\n                  <div className=\"message-body\" data-cy=\"CommentBody\">\n                    {body}\n                  </div>\n                </article>\n              );\n            })}\n          </>\n        )}\n\n        {!commentsLoading && !formDisplayed && !postError && (\n          <button\n            data-cy=\"WriteCommentButton\"\n            type=\"button\"\n            className=\"button is-link\"\n            onClick={() => handleShowAddComment()}\n          >\n            Write a comment\n          </button>\n        )}\n\n        {formDisplayed && (\n          <NewCommentForm\n            commentLoading={commentLoading}\n            commentAdd={handleCommentAdd}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import { client } from '../utils/fetchClient';\nimport { User } from '../types/User';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\n\nexport const getUsers = (url: string) => {\n  return client.get<User[]>(url);\n};\n\nexport const getPosts = (url: string) => {\n  return client.get<Post[]>(url);\n};\n\nexport const getComments = (id: number) => {\n  return client.get<Comment[]>(`/comments?postId=${id}`);\n};\n\n// eslint-disable-next-line max-len\nexport const addComment = (postId: number, name: string, email: string, body: string) => {\n  return client.post<Comment>('/comments', {\n    postId,\n    name,\n    email,\n    body,\n  });\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import React, { useState, useEffect, useRef } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ninterface UserSelectorProps {\n  users: User[],\n  selectedUser: User | null,\n  userSelectedId: (user: User) => void,\n}\n\nexport const UserSelector: React.FC<UserSelectorProps> = ({\n  users,\n  selectedUser,\n  userSelectedId,\n}) => {\n  const [dropdownActive, setDropdownActive] = useState(false);\n  const dropdownRef = useRef<HTMLDivElement>(null);\n\n  const handleUsersDropdown = (event: MouseEvent) => {\n    if (dropdownRef.current\n      && !dropdownRef.current.contains(event.target as HTMLDivElement)) {\n      setDropdownActive(false);\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('mousedown', handleUsersDropdown);\n\n    return () => {\n      document.removeEventListener('mousedown', handleUsersDropdown);\n    };\n  }, []);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', {\n        'is-active': dropdownActive,\n      })}\n      ref={dropdownRef}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setDropdownActive(!dropdownActive)}\n        >\n          <span>{selectedUser ? selectedUser?.name : 'Choose a user'}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => {\n            const { id, name } = user;\n\n            return (\n              <a\n                key={id}\n                href={`#user-${id}`}\n                className={classNames(\n                  'dropdown-item',\n                  { 'is-active': id === selectedUser?.id },\n                )}\n                onClick={() => {\n                  userSelectedId(user);\n                  setDropdownActive(false);\n                }}\n              >\n                {name}\n              </a>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport {\n  getPosts, getUsers,\n} from './api/api';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [postsLoading, setPostsLoading] = useState(false);\n  const [postError, setPostError] = useState(false);\n\n  useEffect(() => {\n    getUsers('/users')\n      .then(setUsers);\n  }, []);\n\n  useEffect(() => {\n    if (selectedUser) {\n      const serchedUrl = `/posts?userId=${selectedUser.id}`;\n\n      setPostsLoading(true);\n      getPosts(serchedUrl)\n        .then((userPosts: Post[]) => {\n          setPosts(userPosts);\n          setPostError(false);\n        })\n        .catch(() => setPostError(true))\n        .finally(() => setPostsLoading(false));\n    }\n  }, [selectedUser]);\n\n  const handleUserSelected = (user: User) => {\n    setSelectedPost(null);\n    setSelectedUser(null);\n    setSelectedUser(user);\n  };\n\n  const handlePostSelected = (post: Post) => {\n    if (selectedPost?.id === post?.id) {\n      setSelectedPost(null);\n\n      return;\n    }\n\n    setSelectedPost(post);\n  };\n\n  const selectPost = posts.find(post => post === selectedPost) || null;\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUser={selectedUser}\n                  userSelectedId={handleUserSelected}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && !postError && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {postsLoading ? (\n                  <Loader />\n                ) : (\n                  <>\n                    {postError && (\n                      <div\n                        className=\"notification is-danger\"\n                        data-cy=\"PostsLoadingError\"\n                      >\n                        Something went wrong!\n                      </div>\n                    )}\n\n                    {posts.length > 0 && (\n                      <PostsList\n                        posts={posts}\n                        postSelected={handlePostSelected}\n                      />\n                    )}\n\n                    {!posts.length && selectedUser && !postError && (\n                      <div\n                        className=\"notification is-warning\"\n                        data-cy=\"NoPostsYet\"\n                      >\n                        No posts yet\n                      </div>\n                    )}\n                  </>\n                )}\n\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectPost && (\n                <PostDetails\n                  selectedPost={selectPost}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}
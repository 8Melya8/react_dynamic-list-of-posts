{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","utils/fetchClient.ts","App.tsx","api/api.tsx","index.tsx"],"names":["PostsList","posts","postIdSelected","useState","selectedId","setSelectedId","className","map","post","id","title","type","classNames","onClick","Loader","NewCommentForm","commentAdd","name","setName","email","setEmail","body","setBody","commentLoading","setIsCommentLoading","validSubmit","setValidSubmit","validInput","inputType","onSubmit","event","preventDefault","newComment","then","finally","htmlFor","placeholder","value","onChange","e","target","PostDetails","comments","commentsError","commentsLoading","commentDelete","formDisplayed","setFormDisplayed","length","comment","href","UserSelector","users","userIdSelected","dropdownActive","setDropdownActive","role","user","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","JSON","stringify","headers","fetch","response","json","client","App","setUsers","setPosts","setComments","selectedUserId","setSelectedUserId","selectedPostId","setSelectedPostId","postsLoading","setPostsLoading","setCommentsLoading","postError","setPostError","commentError","setCommentError","useEffect","serchedUrl","userPosts","catch","searchedUrl","chosenPostComment","selectPost","find","postId","Math","max","com","addComment","prevComments","commentId","filter","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.030f592f.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ninterface PostListProps {\n  posts: Post[],\n  postIdSelected: (id: number) => void,\n}\n\nexport const PostsList: React.FC<PostListProps> = ({\n  posts,\n  postIdSelected,\n}) => {\n  const [selectedId, setSelectedId] = useState(0);\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => {\n            const { id, title } = post;\n\n            return (\n              <tr data-cy=\"Post\">\n                <td data-cy=\"PostId\">{id}</td>\n                <td data-cy=\"PostTitle\">\n                  {title}\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className={classNames('button is-link', {\n                      'is-light': selectedId !== id,\n                    })}\n                    onClick={() => {\n                      postIdSelected(id);\n                      if (selectedId !== id) {\n                        setSelectedId(id);\n                      } else {\n                        setSelectedId(0);\n                        postIdSelected(0);\n                      }\n                    }}\n                  >\n                    {`${selectedId === id ? 'Close' : 'Open'}`}\n                  </button>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable react/button-has-type */\nimport React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { CommentData } from '../types/Comment';\n\ninterface NewCommentFormProps {\n  commentAdd: (comment: CommentData) => Promise<void>,\n}\n\nexport const NewCommentForm: React.FC<NewCommentFormProps> = ({\n  commentAdd,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n  const [commentLoading, setIsCommentLoading] = useState(false);\n  const [validSubmit, setValidSubmit] = useState(true);\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (name && email && body) {\n      const newComment = {\n        name,\n        email,\n        body,\n      };\n\n      setIsCommentLoading(true);\n      setValidSubmit(true);\n\n      commentAdd(newComment)\n        .then(() => setBody(' '))\n        .finally(() => setIsCommentLoading(false));\n    } else {\n      setValidSubmit(false);\n    }\n  };\n\n  const handleFormClear = () => {\n    setName('');\n    setEmail('');\n    setBody('');\n    setValidSubmit(true);\n  };\n\n  const validInput = (inputType: string) => !validSubmit && !inputType;\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input',\n              {\n                'is-danger': !validInput(name),\n              })}\n            value={name}\n            onChange={(e) => setName(e.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {validInput(name) && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {validInput(name) && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input',\n              {\n                'is-danger': validInput(email),\n              })}\n            value={email}\n            onChange={e => setEmail(e.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {validInput(email) && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {validInput(email) && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', {\n              'is-danger': validInput(body),\n            })}\n            value={body}\n            onChange={e => setBody(e.target.value)}\n          />\n        </div>\n\n        {validInput(body) && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('botton is-link', {\n              'is-loading': commentLoading,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleFormClear}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { Comment, CommentData } from '../types/Comment';\n\ninterface PostDetailsProps {\n  post: Post,\n  comments: Comment[],\n  commentsError: boolean,\n  commentsLoading: boolean,\n  commentAdd: (comment: CommentData) => Promise<void>,\n  commentDelete: (commentId: number) => void,\n}\n\nexport const PostDetails: React.FC<PostDetailsProps> = ({\n  post,\n  comments,\n  commentsError,\n  commentsLoading,\n  commentAdd,\n  commentDelete,\n}) => {\n  const [formDisplayed, setFormDisplayed] = useState(false);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${post.id}: ${post.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {commentsLoading ? (\n            <Loader />\n          ) : (\n            <>\n              {commentsError && (\n                <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n                  Something went wrong\n                </div>\n              )}\n            </>\n          )}\n\n          {!comments.length ? (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          ) : (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n              {comments.map(comment => {\n                const {\n                  name,\n                  email,\n                  body,\n                  id,\n                } = comment;\n\n                return (\n                  <article\n                    className=\"message is-small\"\n                    data-cy=\"Comment\"\n                    key={id}\n                  >\n                    <div className=\"message-header\">\n                      <a href={`mailto:${email}`} data-cy=\"CommentAuthor\">\n                        {name}\n                      </a>\n                      <button\n                        data-cy=\"CommentDelete\"\n                        type=\"button\"\n                        className=\"delete is-small\"\n                        aria-label=\"delete\"\n                        onClick={() => commentDelete(id)}\n                      >\n                        delete button\n                      </button>\n                    </div>\n\n                    <div className=\"message-body\" data-cy=\"CommentBody\">\n                      {body}\n                    </div>\n                  </article>\n                );\n              })}\n            </>\n          )}\n          {formDisplayed ? (\n            <NewCommentForm\n              commentAdd={commentAdd}\n            />\n          ) : (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setFormDisplayed(true)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ninterface UserSelectorProps {\n  users: User[],\n  userIdSelected: (id: number) => void,\n}\n\nexport const UserSelector: React.FC<UserSelectorProps> = ({\n  users,\n  userIdSelected,\n}) => {\n  const [dropdownActive, setDropdownActive] = useState(false);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', {\n        'is-active': dropdownActive,\n      })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setDropdownActive(!dropdownActive)}\n        >\n          <span>Choose a user</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => {\n            const { id, name } = user;\n\n            return (\n              <a\n                href={`#user-${id}`}\n                className=\"dropdown-item\"\n                onClick={() => {\n                  userIdSelected(id);\n                  setDropdownActive(false);\n                }}\n              >\n                {name}\n              </a>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useState, useEffect } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport {\n  getPosts, getUsers, getComments, addComment, deleteComment,\n} from './api/api';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { Comment, CommentData } from './types/Comment';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n  const [postsLoading, setPostsLoading] = useState(false);\n  const [commentsLoading, setCommentsLoading] = useState(false);\n  const [postError, setPostError] = useState(false);\n  const [commentError, setCommentError] = useState(false);\n\n  useEffect(() => {\n    getUsers('/users')\n      .then(setUsers);\n  }, []);\n\n  useEffect(() => {\n    if (selectedUserId) {\n      const serchedUrl = `/posts?userId=${selectedUserId}`;\n\n      setPostsLoading(true);\n      getPosts(serchedUrl)\n        .then((userPosts: Post[]) => {\n          setPosts(userPosts);\n          setPostError(false);\n        })\n        .catch(() => setPostError(true))\n        .finally(() => setPostsLoading(false));\n    }\n  }, [selectedUserId]);\n\n  useEffect(() => {\n    if (selectedPostId) {\n      const searchedUrl = `/comments?postId=${selectedPostId}`;\n\n      setCommentsLoading(true);\n      getComments(searchedUrl)\n        .then((chosenPostComment) => {\n          setComments(chosenPostComment);\n          setCommentError(false);\n        })\n        .catch(() => setCommentError(true))\n        .finally(() => setCommentsLoading(false));\n    }\n  }, [selectedPostId]);\n\n  const handleUserSelected = (id: number) => {\n    setSelectedUserId(id);\n  };\n\n  const handlePostSelected = (id: number) => {\n    setSelectedPostId(id);\n  };\n\n  const handleCommentAdd = (comment: CommentData) => {\n    const newComment = {\n      ...comment,\n      postId: selectedPostId,\n      id: Math.max(...comments.map(com => com.id)) + 1,\n    };\n\n    return addComment('/comments', newComment)\n      .then(() => setComments(prevComments => (\n        [...prevComments, newComment]\n      )));\n  };\n\n  const handleCommentDelete = (commentId: number) => {\n    setComments(comments.filter(comment => comment.id !== commentId));\n\n    const searchedUrl = `/comments/${commentId}`;\n\n    deleteComment(searchedUrl);\n  };\n\n  const selectPost = posts.find(post => post.id === selectedPostId) || null;\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  userIdSelected={handleUserSelected}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUserId && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {postsLoading ? (\n                  <Loader />\n                ) : (\n                  <>\n                    {postError && (\n                      <div\n                        className=\"notification is-danger\"\n                        data-cy=\"PostsLoadingError\"\n                      >\n                        Something went wrong!\n                      </div>\n                    )}\n\n                    {posts.length > 0 && (\n                      <PostsList\n                        posts={posts}\n                        postIdSelected={handlePostSelected}\n                      />\n                    )}\n\n                    {!posts.length && selectedUserId && (\n                      <div\n                        className=\"notification is-warning\"\n                        data-cy=\"NoPostsYet\"\n                      >\n                        No posts yet\n                      </div>\n                    )}\n                  </>\n                )}\n\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': posts.length && selectedPostId },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectPost && (\n                <PostDetails\n                  post={selectPost}\n                  comments={comments}\n                  commentsError={commentError}\n                  commentsLoading={commentsLoading}\n                  commentAdd={handleCommentAdd}\n                  commentDelete={handleCommentDelete}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { client } from '../utils/fetchClient';\nimport { User } from '../types/User';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\n\nexport const getUsers = (url: string) => {\n  return client.get<User[]>(url);\n};\n\nexport const getPosts = (url: string) => {\n  return client.get<Post[]>(url);\n};\n\nexport const getComments = (url: string) => {\n  return client.get<Comment[]>(url);\n};\n\nexport const addComment = (url: string, comment: Comment) => {\n  return client.post<Comment[]>(url, comment);\n};\n\nexport const deleteComment = (url: string) => {\n  return client.delete(url);\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}